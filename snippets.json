[{"id":"1","name":"roadmap performance","content":"(function profileAgileCraftRoadmaps(root) {\n    'use strict';\n    // add promise:true to make sure performance function captures correctly\n    let methods = [\n        // get all the function calls done in app-config during entry into the roadmaps route\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('RoadmapSettingsService')`,\n            functionName: `setEstimationInfo`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('RoadmapSettingsService')`,\n            functionName: `setSettings`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('UserService')`,\n            functionName: `getCurrentUserInfo`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('TerminologyService')`,\n            functionName: `set`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('InfoStoreService')`,\n            functionName: `getTerminologyPromise`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `window`,\n            functionName: `fnAfterLoadingIndicator`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `window`,\n            functionName: `fnSessionSuccessHandler`,\n            stack: 'network',\n            promise: true\n        },\n        {\n            path: `window`,\n            functionName: `fnTier1ContextSuccessHandler`,\n            stack: 'network',\n            promise: true\n        },\n        // roadmap service for getData function\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('RoadmapService')`,\n            functionName: 'GetData',\n            stack: 'network',\n            promise: true\n        },\n        // roadmap controller for draw function, contains all items below\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).controller()`,\n            functionName: 'draw',\n            stack: 'ui',\n            promise: true,\n            lastMeasurement: true\n        },\n        // roadmap controller _ProcessData function, used to process data from big GET function\n        {\n            path: `angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).controller()`,\n            functionName: '_ProcessData',\n            stack: 'ui',\n        },\n\n        // d3 draw functions from global namespace\n        {\n            path: `window`,\n            functionName: `fnDrawRows`,\n            stack: 'ui',\n        },\n\n        {\n            path: `window`,\n            functionName: `fnDrawParentBars`,\n            stack: 'ui',\n            promise: true\n        },\n        {\n            path: `window`,\n            functionName: `fnDrawChildrenBars`,\n            stack: 'ui',\n            promise: true\n        },\n    ],\n\n        // functions from `methods` array to invoke to bootstrap roadmaps initialization\n        originalMethods = {}; // functionName: function\n\n\n    methods.forEach(function (methodObj) {\n        let { path, functionName } = methodObj;\n        let methodContainer = eval(path);\n        console.assert(methodContainer, 'cannot find object ' + path + ' to profile');\n\n        originalMethods[functionName] = methodContainer[functionName];\n        console.assert(typeof originalMethods[functionName] === 'function', 'cannot find functionName ' + path + '.' + functionName);\n\n        methodContainer[functionName] = function () {\n            methodObj['start'] = window.performance.now();\n            if (methodObj.promise) {\n                return originalMethods[functionName].apply(methodContainer, arguments).then(function () {\n                    methodObj['end'] = window.performance.now();\n                    methodContainer[functionName] = originalMethods[functionName];\n                    console.log(`restored the '${functionName}' functionName call`);\n                    if (methodObj.lastMeasurement) {\n                        methods.filter(obj => obj.functionName === \"summedFullRender\")[0].end = window.performance.now();\n                        logResults();\n                    }\n                    return arguments[0];\n                });\n            }\n            else {\n                originalMethods[functionName].apply(methodContainer, arguments);\n                methodObj['end'] = window.performance.now();\n                if (methodObj.lastMeasurement) {\n                    methods.filter(obj => obj.functionName === \"summedFullRender\")[0].end = window.performance.now();\n                    logResults();\n                }\n            }\n\n            methodContainer[functionName] = originalMethods[functionName];\n            console.log(`restored the '${functionName}' functionName call`);\n            return arguments[0];\n        };\n        console.log('wrapped', path + '.' + functionName + ' in profiling calls');\n    });\n\n    methods.unshift({\n        functionName: 'summedFullRender',\n        stack: 'all',\n        start: window.performance.now()\n    });\n\n\n    function logResults() {\n        let itemsRendered = document.querySelectorAll('#roadmapWrapper .parent-link').length;\n        let constructedResults = methods.map((method) => {\n            method['executeTime'] = String((method.end - method.start) / 1000);\n            method['release'] = angular.element(document.querySelector('.ng-scope')).injector().get('release');\n            method['itemsRendered'] = String(itemsRendered);\n            return method;\n        }, {}),\n            tableResults = methods.reduce((obj, method) => {\n                obj[method.functionName] = { seconds: (method.end - method.start) / 1000 };\n                return obj;\n            }, {});\n        console.table(tableResults);\n        window.tableResults = tableResults;\n        window.constructedResults = constructedResults;\n        // append element for selenium to detect the performance analysis is complete\n        var successElement = document.createElement('div');\n        successElement.innerText = 'success';\n        successElement.className = 'roadmaps-performance-complete';\n        document.body.appendChild(successElement);\n    }\n    // invoke draw function to trigger all the rest of the roadmaps functions that we are capturing\n    return angular.element(document.querySelector('.contentBodyWrapper.ng-scope')).injector().get('$state').reload('root');\n}(this));"},{"name":"grooming format","content":"var results = [];\n$('#tbodyMain_88 .backlog-table .flex-container').toArray().forEach(el=>{\n    if($(el).find('.id:nth-child(4)').length===0){return;}\n//     debugger;\n    results.push(\n        'Groom[ ] - '+$(el).find('.id:nth-child(4)').text()+' - '+$(el).find('.title').text() + '\\n'\n    );\n});\ncopy(results.join(''));\n"},{"name":"drafting order","content":"// www.channelfireball.com list\n// https://www.channelfireball.com/articles/an-early-pick-order-list-for-guilds-of-ravnica/\nvar list = []\n$('.crystal-catalog-helper-grid-item').each((x,y)=>{list.push(x+':'+$(y).data('name'));});\n//search card name in console\nlist.forEach(x=>console.log(x));"},{"name":"average commit times","content":"//git log --author=\"Thomas\"  --pretty=format:\\\"%ai\\\", > commits.log\n\n//let data = window.commitTimesData;\n// _data = [\n// \"2018-12-22 21:50:56 +0000\",\n// \"2018-12-22 20:27:31 +0000\",\n// \"2018-12-22 20:00:45 +0000\",\n// \"2018-12-21 13:00:13 +0000\"];\n\n\n_ukTimeZones = [\"08:00:00 +0000\", \"17:00:00 +0000\"];\n_usTimeZones = [\"10:00:00 -0500\", \"19:00:00 -0500\"];\nfunction round(date, duration, method) {\n    return moment(Math[method]((+date) / (+duration)) * (+duration)); \n}\nvar date = moment();\nvar roundedDate = round(date, moment.duration(30, \"minutes\"), \"ceil\");\n\nminutesIncrement = 30;\ngraphIncrements = 60/minutesIncrement;\ntimes = [];\nstartTime = moment().hours(0).minutes(0).seconds(0);\nfor(var i = 0; i < 24; i++){\n  for(var j = 0; j < graphIncrements; j++){\n      console.log(startTime.toString());\n    times.push(startTime.clone());\n    startTime.add(minutesIncrement, \"minutes\")\n  }\n}\n\ntimes.map(m=>{return m.toString()});\nvar mOD = function minutesOfDay(m){\n  return m.minutes() + m.hours() * 60;\n}\ndataset = times.map((momentDate, i)=>{\n\n    let nextMoment = times[i+1] ? times[i+1] : moment(99999999999999);\n    let matchCounts = _data.map(str=>moment(str)).filter(commitMomment=>{\n        return mOD(commitMomment)>=mOD(momentDate) && mOD(commitMomment)<=mOD(nextMoment)\n    });\n\n    return {\n        label:`${momentDate.hours()}:${momentDate.minutes()}`,\n        val: matchCounts.length\n    };\n});\n\nconsole.log(dataset);\n\n\n$('body').empty();\nsvgHeight = 1000;\nsvgWidth = 1800;\nd3.select('body').append('svg').attr('width', svgWidth).attr('height', svgHeight);\n\nsvg = d3.select('svg')\nbarPadding = 15;\nbarWidth = (svgWidth / dataset.length);\nbarGroups = svg.selectAll(\"g\")\n    .data(dataset)\n    .enter().append(\"g\");\n\nbarGroups\n    .append(\"rect\")\n    .attr(\"y\", function(d) {\n        return 0;//svgHeight - d\n    })\n    .attr(\"height\", function(d) {\n        return d.val * 5;\n    })\n    .attr(\"width\", barWidth - barPadding)\n    .attr(\"transform\", function (d, i) {\n         var translate = [10+(barWidth * i), 20];\n         return \"translate(\"+ translate +\")\";\n    });\n    \nbarGroups\n    .append(\"text\")\n    .attr(\"transform\", function (d, i) {\n         var translate = [10+(barWidth * i), 20];\n         return \"translate(\"+ translate +\")\";\n    })\n    .text(d=>d.label)\n    .attr(\"style\", \"fill:white\");\n\navgWorkDayStartIndex = 34;\navgWorrkDayEndIndex = dataset.length;\n\ntotalCommitsOutside = dataset.slice(0,avgWorkDayStartIndex).reduce((sum, data)=>sum+data.val, 0);\ntotalCommitsInside = dataset.slice(avgWorkDayStartIndex, avgWorrkDayEndIndex).reduce((sum, data)=>sum+data.val, 0);\n"},{"name":"import jquery & d3","content":"// import jquery and d3\nvar j=document.createElement('script');j.setAttribute('src', 'http://code.jquery.com/jquery.js');document.getElementsByTagName('body')[0].appendChild(j);console.log('imported jquery!');void(j);\nvar d=document.createElement('script');d.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js');document.getElementsByTagName('body')[0].appendChild(d);console.log('imported d3!');void(d);\nvar m=document.createElement('script');m.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.23.0/moment.min.js');document.getElementsByTagName('body')[0].appendChild(m);console.log('imported moment!');void(m);\n\n\n"}]